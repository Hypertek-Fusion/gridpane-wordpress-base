function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

window.bultra = {};

window.bultra.buGetBreakpoints = function () {
  var buBreakPoints = bricksUltra.breakpoints;
  var baseDevice = bricksUltra.baseDevice.baseDevice;
  var baseDeviceWidth = bricksUltra.baseDevice.baseDeviceWidht;
  var sortedBreakpoints = Object.entries(buBreakPoints).sort(function (a, b) {
    return a[1] - b[1];
  }); // const abcd2 = abcd.reduce((a, v) => ( { ...a, [v[0]]: v[1]}), {});

  var finalArr = {};
  sortedBreakpoints.map(function (element, i) {
    finalArr[element[0]] = {};

    if (baseDeviceWidth == element[1]) {
      if (sortedBreakpoints[i + 1]) {
        finalArr[element[0]]['min'] = sortedBreakpoints[i - 1][1];
        finalArr[element[0]]['max'] = sortedBreakpoints[i + 1][1];
      } else {
        finalArr[element[0]]['min'] = sortedBreakpoints[i - 1][1];
        finalArr[element[0]]['max'] = element[1] + 1000;
      }
    } else if (baseDeviceWidth > element[1]) {
      finalArr[element[0]]['max'] = element[1];

      if (i !== 0) {
        finalArr[element[0]]['min'] = sortedBreakpoints[i - 1][1];
      }
    } else {
      finalArr[element[0]]['min'] = element[1];

      if (sortedBreakpoints[i + 1]) {
        finalArr[element[0]]['max'] = sortedBreakpoints[i + 1][1];
      } else {
        finalArr[element[0]]['max'] = element[1] + 1000;
      }
    }
  });
  var key = Object.keys(finalArr)[0];
  finalArr[key]['min'] = 0;
  var innerWidth = window.innerWidth;
  var current_device = '';
  var lastElement = Object.keys(finalArr)[Object.keys(finalArr).length - 1];

  if (innerWidth > finalArr[lastElement]['max']) {
    current_device = lastElement;
  } else {
    for (var k in finalArr) {
      if (innerWidth >= finalArr[k]['min'] && innerWidth <= finalArr[k]['max']) {
        current_device = k;
      }
    }
  }

  return current_device;
};

window.bultra.buGetDevices = function () {
  var buBreakPoints = bricksUltra.breakpoints;
  var devices = Object.keys(buBreakPoints);
  return devices;
};

var SwiperBase = /*#__PURE__*/_createClass(function SwiperBase(wrapper, container, data) {
  var _element$classList;

  _classCallCheck(this, SwiperBase);

  //checking if swiper wrapper has more than 1 children
  var wrap = container.querySelector(".swiper-wrapper");

  if (wrap.childElementCount <= 1) {
    return;
  }

  if (typeof data === "undefined") {
    return false;
  }

  var element = wrapper;

  if (container.classList.contains('bultr-swiper-container')) {
    var myContainer = container;
    myContainer.classList.add('bricks-swiper-container');
  } // swiper data


  data = JSON.parse(data);
  effects = data.hasOwnProperty('effect') ? data.effect : 'slide';
  perView = data.hasOwnProperty('sliderPerView') ? parseInt(data.sliderPerView) : 3;
  perGroup = data.hasOwnProperty('slidesPerGroup') ? parseInt(data.slidesPerGroup) : 1;
  spaceBtw = data.hasOwnProperty('spaceBetween') ? parseInt(data.spaceBetween) : 10;
  autoheight = data.hasOwnProperty('autoheight') ? data.autoheight : false;
  loop = data.hasOwnProperty('loop') ? data.loop : false;
  speed = data.hasOwnProperty('speed') ? parseInt(data.speed) : 1000;
  swiperdata = {
    direction: data.direction,
    effect: effects,
    autoHeight: autoheight,
    loop: loop,
    speed: speed,
    spaceBetween: spaceBtw,
    slidesPerView: perView,
    slidesPerGroup: perGroup,
    on: {
      slideChangeTransitionStart: function slideChangeTransitionStart(swiper) {
        var $wrapperEl = swiper.$wrapperEl;
        var params = swiper.params;
        $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass + '.' + params.slideActiveClass).each(function () {
          console.log(this);
          var idx = this.getAttribute('data-swiper-slide-index');
          this.innerHTML = $wrapperEl.children('.' + params.slideClass + '[data-swiper-slide-index="' + idx + '"]:not(.' + params.slideDuplicateClass + ')').html();
        });
      }
    }
  }; // keyboard

  if (data.hasOwnProperty('keyboard') && data.keyboard !== '') {
    swiperdata.keyboard = {
      enabled: data.keyboard,
      onlyInViewport: true
    };
  } // effect fade 


  if (data.effect === "fade") {
    swiperdata.fadeEffect = {
      crossFade: true
    };
  } //Breakpoints


  var device = window.bultra.buGetBreakpoints();
  window.addEventListener('resize', function () {
    onResize();
  });

  function onResize() {
    var deviceFun = window.bultra.buGetBreakpoints();
  } //getting the smallest device


  var devicearr = window.bultra.buGetDevices();
  var devicelen = devicearr.length;
  var smallestdevice = devicearr[devicelen - 1];

  (_element$classList = element.classList).remove.apply(_element$classList, _toConsumableArray(window.bultra.buGetDevices()));

  element.classList.add(device); //window.bricksUltra[wid]?.destroy();

  if (data.hasOwnProperty('breakpoints') && data.breakpoints !== '') {
    breakpointData = data.breakpoints;
    breakpoints = data.breakpoints;

    for (var key in breakpoints) {
      var dd = breakpoints[key].deviceLabel; //deleting smallest device array from breakpoints and getting its data to set for default

      if (dd === smallestdevice) {
        smallDeviceKey = breakpoints[key];
        swiperdata.slidesPerView = parseInt(smallDeviceKey.slidesPerView);
        swiperdata.slidesPerGroup = parseInt(smallDeviceKey.slidesPerGroup);
        delete breakpointData[key];
      }
    } //removing device label from object


    for (var _key in breakpointData) {
      delete breakpointData[_key].deviceLabel;
    }

    swiperdata.breakpoints = breakpointData;
  } // autoplay  


  if (data.hasOwnProperty('autoplay') && data.autoplay !== '') {
    autoplay = data.autoplay;

    if (autoplay.hasOwnProperty('delay') && data.autoplay.delay !== '' && data.autoplay.delay !== null && data.autoplay.delay !== undefined) {
      delay = data.autoplay.delay;
    }

    if (autoplay.hasOwnProperty('pauseOnMouseEnter') && data.autoplay.pauseOnMouseEnter !== '' && data.autoplay.pauseOnMouseEnter !== null && data.autoplay.pauseOnMouseEnter !== undefined) {
      pauseHover = data.autoplay.pauseOnMouseEnter;
    }

    if (autoplay.hasOwnProperty('disableOnInteraction') && data.autoplay.disableOnInteraction !== '' && data.autoplay.disableOnInteraction !== null && data.autoplay.disableOnInteraction !== undefined) {
      interaction = data.autoplay.disableOnInteraction;
    }

    swiperdata.autoplay = {
      disableOnInteraction: interaction,
      delay: delay,
      pauseOnMouseEnter: pauseHover
    };
  } // navigation


  if (data.hasOwnProperty('navigation') == true && data.navigation != 'undefined') {
    swiperdata.navigation = {
      nextEl: ' .bultr-swiper-button-next',
      prevEl: ' .bultr-swiper-button-prev'
    };
  } // scrollbar


  swiperdata.scrollbar = {
    el: ' .bultr-swiper-scrollbar',
    hide: true
  }; // pagination

  if (data.hasOwnProperty('pagination') && data.pagination.type !== '') {
    type = data.pagination.hasOwnProperty('type') ? data.pagination.type : 'bullets';
    clickable = data.pagination.hasOwnProperty('clickable') ? data.pagination.clickable : true;
    swiperdata.pagination = {
      el: ' .bultr-swiper-pagination',
      type: data.pagination.type,
      clickable: data.pagination.clickable
    };
  }

  var slider = new Swiper(myContainer, swiperdata); // window.bricksUltra[`{slider-wid}`] = slider;
});

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && alertBox();
});

function alertBox() {
  var alertBoxes = bricksQuerySelectorAll(document, '.brxe-wpvbu-alert-box');
  alertBoxes.forEach(function (element) {
    var id = element.getAttribute('id');
    var alert = element.querySelector('.bultr-alert-box');
    var layouts = JSON.parse(alert.getAttribute('layouts'));
    var buttons = element.querySelectorAll('.bultr-alert-button');
    var isDismissible = alert.getAttribute('dismissible');
    var dismiss_button = alert.querySelector('.bultr-dismiss-content');
    var isCookieSet = checkCookie(id);
    var device = window.bultra.buGetBreakpoints();
    alert.classList.add(device);

    if (layouts) {
      alert.classList.add('bultr-alert-icon-pos-' + layouts[device]);
    }

    if (bricksIsFrontend) {
      if (isCookieSet == '1') {
        alert.style.display = 'none';
      } else {
        alert.classList.remove('alert-dismiss');
      }
    }

    if (buttons.length > 0) {
      buttons.forEach(function (button) {
        button.addEventListener('click', function (e) {
          var pri_actions = button.getAttribute('actions');
          var actions = pri_actions.split(',');
          var isDefer = actions.includes('defer');
          var isDismiss = actions.includes('dismiss');

          if (bricksIsFrontend) {
            if (isDefer && !isCookieSet == '1') {
              var expire_time = button.getAttribute('defer');

              if (expire_time == '') {
                expire_time = 43200;
              }

              setAlertCookie(expire_time, id, alert);
            }
          }

          if (isDismiss) {
            alert.classList.add('alert-dismiss');
          }
        });
      });
    }

    if (isDismissible) {
      dismiss_button.addEventListener('click', function () {
        alert.classList.add('alert-dismiss');
      });
    }

    function hideAlert() {
      alert.style.display = "none";
    }

    function setAlertCookie(expire_time, id, alert) {
      var cname = 'bultr-alert-cookie-' + id;
      var d = new Date();
      d.setTime(d.getTime() + expire_time * 60 * 1000);
      var expires = "expires=" + d.toUTCString();
      document.cookie = cname + "=" + "1" + ";" + expires + ";path=/";
      alert.classList.add('alert-dismiss');
    }

    function checkCookie() {
      var isCookie = getCookie('bultr-alert-cookie-' + id);

      if (isCookie) {
        return '1';
      }
    }

    function getCookie(cname) {
      var name = cname + "=";
      var decodedCookie = decodeURIComponent(document.cookie);
      var ca = decodedCookie.split(';');

      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];

        while (c.charAt(0) == ' ') {
          c = c.substring(1);
        }

        if (c.indexOf(name) == 0) {
          return c.substring(name.length, c.length);
        }
      }

      return "";
    }

    window.addEventListener('resize', function () {
      if (layouts) {
        onResize();
      }
    });

    function onResize() {
      var device = window.bultra.buGetBreakpoints(); // implement resize 

      var alert_classes = alert.classList;
      var devices = window.bultra.buGetDevices();
      var current_device = '';
      alert_classes.forEach(function (alert_class) {
        if (devices.includes(alert_class)) {
          current_device = alert_class;
        }
      });

      if (current_device != '') {
        alert.classList.remove(current_device);
        alert.classList.remove('bultr-alert-icon-pos-' + layouts[current_device]);
      }

      alert.classList.add(device);
      alert.classList.add('bultr-alert-icon-pos-' + layouts[device]);
    }
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && buBusinessHours();
});

function buBusinessHours() {
  var businessH = bricksQuerySelectorAll(document, '.brxe-wpvbu-business-hours');
  businessH.forEach(function (element) {
    var timezone = element.getAttribute('data-timezone');
    var time = element.getAttribute('data-time');
    var timeFormat = element.getAttribute('data-format');
    timeFormat = timeFormat == "true" ? true : false;
    var settings = JSON.parse(element.getAttribute('data-settings')); //formating string from calcTime to time in string(12:00)

    var options = {
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
      hour12: timeFormat
    };

    if (settings.businessIndicator == true) {
      calcTime(timezone);
      setInterval(calcTime, 1000, timezone); // Repeat myFunction every 1 mintb b bb

      get_Time_Left();
      setInterval(get_Time_Left, 1000);
    } //function to get time by the given timezone


    function calcTime(timezone) {
      var date = new Date();
      var offset;
      var regexp = /^(\+|\-)\d{1,2}:\d{2}$/;

      if (regexp.test(timezone)) {
        var _timezone$split$map = timezone.split(":").map(Number),
            _timezone$split$map2 = _slicedToArray(_timezone$split$map, 2),
            hours = _timezone$split$map2[0],
            mints = _timezone$split$map2[1];

        offset = (hours * 60 + mints) * 60;
      } else {
        var tz = Intl.DateTimeFormat(undefined, {
          timeZone: timezone
        }).resolvedOptions().timeZone;

        if (tz === timezone) {
          var dt = new Date();
          dt = dt.toLocaleString("en-US", {
            timeZone: timezone
          });
          date.setTime(Date.parse(dt));
          var datedisplay = date;
          glbCurrenttime = date.getTime();

          var _biTimehtml = element.querySelector('.bultr-bh-bi-Time');

          _biTimehtml.innerHTML = datedisplay.toLocaleString('en-US', options);
        }
      }

      if (offset >= 0 || offset <= 0) {
        // 1000 milliseconds = 1 second
        // 1 minute = 60 seconds 
        // 1 hour = 60 mints
        // 1 hour = 3600
        // converting minutes to milliseconds  60 * 1000 = 60000.
        // converting hours to millisecond 3600 * 1000 = 3600000.
        var utcTime = date.getTime() + date.getTimezoneOffset() * 60000;
        date.setTime(utcTime + offset * 1000);
        var datedisplay = date;
        var dateMatch = new Date();
        var matchTime = dateMatch.getTime() + offset * 1000;
        dateMatch.setTime(matchTime);
        glbCurrenttime = Math.ceil(dateMatch.getTime() / 1000);
      }

      var biTimehtml = element.querySelector('.bultr-bh-bi-Time');

      if (biTimehtml != undefined) {
        biTimehtml.innerHTML = datedisplay.toLocaleString('en-US', options);
      }
    }

    function get_Time_Left() {
      //get warning mst element
      incicatorLeft = element.querySelector('.bultr-bh-bi-left');
      openWrn = element.querySelector('.bultr-bh-bi-open-wmsg');
      closeWrn = element.querySelector('.bultr-bh-bi-close-wmsg'); //get current day wrapper

      var cday_wrap = element.querySelector('.bultr-currentday');

      if (cday_wrap != undefined) {
        //getting all slots in current day wrap
        var slots = cday_wrap.querySelectorAll('.bultr-bh-label-wrap'); //LABEL checking if current time is btw slot if true then open else close

        var slot = Object.values(slots);

        for (var _i2 = 0, _slot = slot; _i2 < _slot.length; _i2++) {
          var ele = _slot[_i2];
          var Opentime = parseInt(ele.getAttribute('data-open'));
          var Closetime = parseInt(ele.getAttribute('data-close'));

          if (settings.indctLabel == true) {
            incicatorLabel = element.querySelector('.bultr-labelss');

            if (incicatorLabel) {
              if (glbCurrenttime > Opentime && glbCurrenttime < Closetime) {
                incicatorLabel.innerHTML = settings.openLableTxt;
                incicatorLabel.classList.add('bultr-lbl-open');
                incicatorLabel.classList.remove('bultr-lbl-close');
                break;
              } else {
                incicatorLabel.innerHTML = settings.closeLabelTxt;
                incicatorLabel.classList.add('bultr-lbl-close');
                incicatorLabel.classList.remove('bultr-lbl-open');
              }
            }
          }
        } //WARNING MASSAGE


        for (var _i3 = 0, _slot2 = slot; _i3 < _slot2.length; _i3++) {
          var _ele = _slot2[_i3];

          var _Opentime = parseInt(_ele.getAttribute('data-open'));

          var _Closetime = parseInt(_ele.getAttribute('data-close'));

          openWrn = element.querySelector('.bultr-bh-bi-open-wmsg');
          closeWrn = element.querySelector('.bultr-bh-bi-close-wmsg'); //opening warning

          if (_Opentime > glbCurrenttime) {
            openmints = Math.ceil((_Opentime - glbCurrenttime) / 60);

            if (openmints <= parseInt(settings.openMints)) {
              if (settings.openWrnMsg == true) {
                if (openWrn) {
                  openWrn.innerHTML = settings.openWrnMsgTxt + " " + openmints + " Minutes";
                } else {
                  openWrn = document.createElement('div');
                  openWrn.setAttribute('class', 'bultr-bh-bi-open-wmsg');
                  incicatorLeft.appendChild(openWrn);
                  openWrn.innerHTML = settings.openWrnMsgTxt + " " + openmints + " Minutes";
                }
              }
            }

            break;
          } else {
            if (openWrn) {
              openWrn.innerHTML = "";
            }
          } //closing warning


          if (glbCurrenttime < _Closetime || glbCurrenttime > _Opentime) {
            closemints = Math.ceil((_Closetime - glbCurrenttime) / 60);
            setCloseMint = parseInt(settings.closeMints);

            if (closemints <= setCloseMint && closemints != 'NaN') {
              if (closemints > 0) {
                if (settings.closeWrnMsg == true) {
                  if (closeWrn) {
                    closeWrn.innerHTML = settings.closeWrnMsgText + " " + closemints + " Minutes";
                  } else {
                    closeWrn = document.createElement('div');
                    closeWrn.setAttribute('class', 'bultr-bh-bi-close-wmsg');
                    incicatorLeft.appendChild(closeWrn);
                    closeWrn.innerHTML = settings.closeWrnMsgText + " " + closemints + " Minutes";
                  }

                  closeWrn.innerHTML = settings.closeWrnMsgText + " " + closemints + " Minutes";
                }
              } else {
                if (closeWrn) {
                  closeWrn.innerHTML = "";
                }
              }
            }
          }
        }
      }
    }
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && buCharts();
});

function buCharts() {
  var containers = document.querySelectorAll('.bultr-charts-wrapper');
  containers.forEach(function (element) {
    var chartWrap = element.querySelector('.bultr-chart-wrap');

    if (chartWrap != null || chartWrap != undefined) {
      var canvas = element.querySelector('.bultr-chart-canvas');
      var id = element.id;
      var ctx = canvas.getContext("2d");
      var chartStatus = Chart.getChart(ctx);

      if (chartStatus != undefined) {
        chartStatus.destroy();
      }

      var chartDatas = chartWrap.dataset.chart;
      chartDatas = JSON.parse(chartDatas);

      if (chartDatas.type === 'polarArea' && chartDatas.enablePercentage == true) {
        chartDatas.options.scales.r.ticks['callback'] = function (value, index, values) {
          return "".concat(value, "%");
        };
      } //highlight on load


      var offsetValue = chartDatas.offsetValue;
      var key = 0;
      var label_value = chartDatas.highlightLoad;
      var highlightOnLoad = {
        id: "highlightOnLoad",
        afterDatasetsDraw: function afterDatasetsDraw(chart, args, options) {
          var labels = chartDatas.data.labels;
          var index = labels.indexOf(label_value);

          if (label_value != "" && key === 0) {
            chart._metasets[0].data[index].options.offset = parseInt(offsetValue);
          }

          key++;
        }
      };

      if (label_value != "") {
        chartDatas.plugins = [highlightOnLoad];
      }

      new Chart(ctx, chartDatas);
    }
  });
}

function InitComparisonTable() {
  var elements = document.querySelectorAll('.bultr-comp-table-wrap');

  if (elements.length > 0) {
    elements.forEach(function (element) {
      var isFilterable = element.getAttribute('data-table-filter');
      var cols = element.getAttribute('data-cols');
      new Table({
        table: element,
        isFilterable: isFilterable,
        cols: cols
      });
    });
  }
}

document.addEventListener('DOMContentLoaded', function (t) {
  bricksIsFrontend && InitComparisonTable();
});
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && ContentSwitcher();
});

function ContentSwitcher() {
  var cs_elements = bricksQuerySelectorAll(document, '.brxe-wpvbu-content-switcher');
  cs_elements.forEach(function (element) {
    var wrapper = element.querySelector('.bultr-cs-switcher-wrapper');
    ContentSwitcherButton(element);
    ContentSwitcherRadio(element);
  });
}

function ContentSwitcherButton(element) {
  var buttons = element.querySelectorAll('.bultr-content-switch-button');
  buttons.forEach(function (button) {
    button.addEventListener('click', function (e) {
      e.preventDefault();

      if (button.classList.contains('active')) {
        return;
      }

      remove_active_all(buttons);
      var labelID = button.dataset.id;
      button.classList.add('active');
      var content_sections = element.querySelectorAll('.bultr-cs-content-section');
      remove_active_all(content_sections);
      element.querySelector('.bultr-cs-content-section[data-id="' + labelID + '"]').classList.add('active');
    });
  });
}

function ContentSwitcherRadio(element) {
  if (element.querySelector('.bultr-cs-layout_1')) {
    return;
  }

  var toggle_switch = element.querySelector('.bultr-content-toggle-switch');
  var primary_label = element.querySelector('.bultr-content-switch-label.primary-label');
  var primary_id = primary_label.dataset.id;
  var secondary_label = element.querySelector('.bultr-content-switch-label.secondary-label');
  var secondary_id = secondary_label.dataset.id;
  var primary_content_section = element.querySelector('.bultr-cs-content-section[data-id="' + primary_id + '"]');
  var secondary_content_section = element.querySelector('.bultr-cs-content-section[data-id="' + secondary_id + '"]');
  toggle_switch.addEventListener('click', function (e) {
    if (e.target.checked) {
      secondary_label.classList.add('active');
      secondary_content_section.classList.add('active');
      primary_label.classList.remove('active');
      primary_content_section.classList.remove('active');
    } else {
      primary_label.classList.add('active');
      primary_content_section.classList.add('active');
      secondary_label.classList.remove('active');
      secondary_content_section.classList.remove('active');
    }
  });
}

function remove_active_all(elements) {
  elements.forEach(function (element) {
    element.classList.remove('active');
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bricksUltraContentTicker();
});

function bricksUltraContentTicker() {
  var contentTickers = bricksQuerySelectorAll(document, '.brxe-wpvbu-content-ticker');
  contentTickers.forEach(function (contentTicker) {
    var mainSlider = contentTicker.querySelector('.bultr-slider');

    if (mainSlider) {
      if (mainSlider.classList.contains("bultr-slider")) {
        mainSlider.classList.add("splide");
        var content_ticker = new Splide(mainSlider);
        content_ticker.mount();
      }
    }
  });
}

function bricksUltraFilterableGallery() {
  bricksQuerySelectorAll(document, ".brxe-wpvbu-filterable-gallery").forEach(function (item) {
    var currentItem = item;
    var gallery = item.querySelector('.bultr-filters-image');
    var layout = gallery.dataset.layout;
    var defautTab = gallery.dataset.dtab;
    var gutterMargin = '';
    var filters = currentItem.querySelectorAll(".bultr-filter-title");
    var images = currentItem.querySelectorAll(".bultr-layout-item");
    var galleryWrapper = item.querySelector('.bultr-gallery');
    var itemSelector = '';
    var selectedFilter = '';

    if (layout === 'masonry') {
      if (defautTab !== 'all') {
        selectedFilter = "." + defautTab;
        itemSelector = "." + defautTab;
      } else {
        selectedFilter = ".all";
        itemSelector = ".bultr-layout-item";
      }

      gutterMargin = parseInt(gallery.dataset.gutter);
      arrangeImages(itemSelector);
    } else {
      arrangeImages(defautTab);
    }

    filters.forEach(function (filter) {
      filter.addEventListener("click", function (item) {
        selectedFilter = this.dataset.filter;
        var activeFilter = Array.from(filters).filter(function (node) {
          return node.classList.contains('active');
        })[0];
        var activeFilterFilter = activeFilter.dataset.filter;

        if (activeFilterFilter !== selectedFilter) {
          activeFilter.classList.remove("active");
          this.classList.add("active");
          arrangeImages(selectedFilter);
        }
      });
    });

    function arrangeImages(currentFilter) {
      currentFilter = currentFilter.replace('.', '');
      images.forEach(function (image) {
        image.classList.add('transit-in');
        setTimeout(hideImage, 500, image);
      });
      images.forEach(function (image) {
        if (image.classList.contains(currentFilter)) {
          image.classList.add('transit-out');
          setTimeout(showImage, 500, image);
        }
      });

      if (layout === 'masonry') {
        setTimeout(function () {
          triggerMasonry();
        }, 500);
      }
    }

    if (galleryWrapper.hasAttribute('data-settings')) {
      if (galleryWrapper.hasAttribute('data-settings')) {
        settings = JSON.parse(galleryWrapper.dataset.settings);
      }

      if (settings.tilt) {
        setTilt(currentItem, settings);
      }

      if (settings.hoverAware) {
        var overlaySpeed = settings.overlaySpeed;
        jQuery(currentItem).find('.bultr-layout-item').hoverdir({
          speed: 300,
          hoverElem: '.bultr-overlay'
        });
      }
    }

    function hideImage(image) {
      image.style.display = "none";
      image.classList.remove('transit-in');
    }

    function triggerMasonry() {
      var isotope = undefined;

      if (typeof isotope != "undefined") {
        isotope.destroy();
      }

      isotope = new Masonry(galleryWrapper, {
        itemSelector: selectedFilter,
        gutter: gutterMargin
      });
    }

    function showImage(image) {
      if (layout === 'masonry') {
        image.style.display = "block";
        image.classList.remove('transit-out');
      } else {
        image.style.display = "block";
        image.classList.remove('transit-out');
      }
    }
  });
}

function setTilt(item, settings) {
  var images = item.querySelectorAll('.bultr-tilt');
  images.forEach(function (image) {
    options = {
      maxTilt: settings.tiltMax,
      startX: 0,
      // the starting tilt on the X axis, in degrees.
      startY: 0,
      perspective: settings.tiltPerspective,
      // Transform perspective, the lower the more extreme the tilt gets.
      scale: 1,
      // 2 = 200%, 1.5 = 150%, etc..
      speed: settings.tiltSpeed,
      // Speed of the enter/exit transition.
      transition: true,
      // Set a transition on enter/exit.
      axis: settings.tiltAxis,
      reset: true,
      // If the tilt effect has to be reset on exit.
      //easing:             "cubic-bezier(.03,.98,.52,.99)",   // Easing on enter/exit.
      easing: "linear",
      glare: settings.tiltGlare,
      // Enables glare effect
      'max-glare': settings.tiltMaxGlare,
      // From 0 - 1.
      gyroscope: true,
      // Boolean to enable/disable device orientation detection,
      gyroscopeMinAngleX: -45,
      // This is the bottom limit of the device angle on X axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the left border of the element;
      gyroscopeMaxAngleX: 45,
      // This is the top limit of the device angle on X axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the right border of the element;
      gyroscopeMinAngleY: -45,
      // This is the bottom limit of the device angle on Y axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the top border of the element;
      gyroscopeMaxAngleY: 45 // This is the top limit of the device angle on Y axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the bottom border of the element;

    };
    new VanillaTilt(image, options);
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bricksUltraFilterableGallery();
});
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && FlipBox();
});

function FlipBox() {
  var fb_elements = document.querySelectorAll('.bultr-flip-box-container');
  fb_elements.forEach(function (element) {
    var _element$dataset;

    var trigger = element.dataset.trigger;
    var disabled = element === null || element === void 0 ? void 0 : (_element$dataset = element.dataset) === null || _element$dataset === void 0 ? void 0 : _element$dataset.disable;

    if (disabled) {
      return;
    }

    if (trigger === 'hover') {
      element.addEventListener('mouseover', function (e) {
        e.target.parentElement.classList.add('bultr-show');
        e.target.parentElement.classList.remove('bultr-hide');
      });
    } else {
      element.addEventListener('click', function (e) {
        e.target.parentElement.classList.add('bultr-show');
        e.target.parentElement.classList.remove('bultr-hide');
      });
    }

    element.addEventListener('mouseleave', function (e) {
      e.target.classList.remove('bultr-show');
      e.target.classList.add('bultr-hide');
    });
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && ExecuteAfterBefore();
});

function ExecuteAfterBefore() {
  var ab_elements = document.querySelectorAll('.bultr-ic-wrapper');

  if (ab_elements.length) {
    new imagesLoaded(ab_elements, function () {
      ab_elements.forEach(function (element) {
        var datasets = element.dataset;
        var id = datasets.icId;
        new BeforeAfter({
          className: 'bultr-ic-' + id,
          beforeText: datasets.beforeText,
          afterText: datasets.afterText,
          orientation: datasets.orientation,
          defaultSliderOffset: datasets.sliderOffset / 100,
          moveSliderOnHover: datasets.slideMove === 'hover',
          defaultSeparatorPosition: datasets.separatorOffset,
          clickToMove: (datasets === null || datasets === void 0 ? void 0 : datasets.moveClick) || false
        });
      });
    });
  }
}

InfoCircle = null;

(function () {
  document.addEventListener("DOMContentLoaded", function (t) {
    bricksIsFrontend && InfoCircle();
  });
  var angle = 0;
  var autoplayDuration = 0;

  InfoCircle = function InfoCircle() {
    var ab_elements = bricksQuerySelectorAll(document, ".brxe-wpvbu-info-circle");
    ab_elements.forEach(function (element) {
      var timer = null;
      var autoplay = element.querySelector(".bultr-info-circle").dataset.autoplay;
      set_icon_mobile(element, angle, autoplay);
      clearInterval(timer);

      if (document.body.classList.contains("bricks-is-frontend")) {
        if (autoplay !== "no") {
          autoplayDuration = element.querySelector(".bultr-info-circle").dataset.delay;
          startSetInterval(element, autoplayDuration);
        }
      }

      if (element.querySelectorAll(".bultr-info-circle-item").length > 0) {
        console.log('Elemnt', element.querySelectorAll(".bultr-info-circle-item")[0]);
        element.querySelectorAll(".bultr-info-circle-item")[0].classList.add("bultr-active");
      }
    });
  };

  function set_icon_mobile(element, angle, autoplay) {
    var icons = element.querySelectorAll(".bultr-ic-icon-wrap");

    if (window.innerWidth < 767) {
      icons.forEach(function (icon) {
        icon.style.top = icon.getBoundingClientRect().height / 2 + 8 + "px";
        icon.nextElementSibling.style.paddingTop = icon.getBoundingClientRect().height / 2 + 8 + "px";
      });
    } else {
      icons.forEach(function (icon) {
        icon.style.marginLeft = icon.getBoundingClientRect().width * -0.5 + "px";
        icon.style.marginTop = icon.getBoundingClientRect().height * -0.5 + "px";
        var a = arc_to_coords(angle);
        var b = 360 / icons.length;
        icon.style.left = a.x + "%";
        icon.style.top = a.y + "%";
        angle = angle + b;

        if (autoplay === "no" || !document.body.classList.contains("bricks-is-frontend")) {
          icon.addEventListener("click", function () {
            remove_active_all(element);
            set_active(icon);
          });

          if (element.querySelector(".bultr-info-circle").dataset.mouseenter == "1" && document.body.classList.contains("bricks-is-frontend")) {
            icon.addEventListener("mouseenter", function () {
              remove_active_all(element);
              set_active(icon);
            });
          }
        }
      });
    }
  }

  function set_active(icon) {
    icon.parentElement.classList.add("bultr-active");
  }

  function remove_active_all(element) {
    element.querySelectorAll(".bultr-info-circle-item").forEach(function (item) {
      item.classList.remove("bultr-active");
    });
  }

  function arc_to_coords(angle) {
    angle = (angle - 90) * Math.PI / 180;
    return {
      x: 50 + 45 * Math.cos(angle),
      y: 50 + 45 * Math.sin(angle)
    };
  }

  function startSetInterval(element, autoplayDuration) {
    if (element.querySelector(".bultr-info-circle").dataset.autoplay == "1") {
      timer = setInterval(function () {
        return showDiv(element);
      }, autoplayDuration);
    }
  }

  function showDiv(element) {
    if ((element === null || element === void 0 ? void 0 : element.querySelectorAll(".bultr-active").length) > 0) {
      var activeElement = element.querySelector(".bultr-active");
      remove_active_all(element);

      if (activeElement !== null && activeElement !== void 0 && activeElement.nextElementSibling) {
        var _activeElement$nextEl;

        activeElement === null || activeElement === void 0 ? void 0 : (_activeElement$nextEl = activeElement.nextElementSibling) === null || _activeElement$nextEl === void 0 ? void 0 : _activeElement$nextEl.classList.add("bultr-active");
      } else {
        element.querySelector(".bultr-info-circle-item").classList.add("bultr-active");
      }
    } else {
      element.querySelector(".bultr-info-circle-item").classList.add("bultr-active");
    }
  }
})();

function getLayoutValue(key) {
  if (key === "column") {
    return "vertical";
  }

  return "horizontal";
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && MultiButtons();
});

function MultiButtons() {
  var mb_elements = bricksQuerySelectorAll(document, ".brxe-wpvbu-multi-button");
  mb_elements.forEach(function (element) {
    var current_device = window.bultra.buGetBreakpoints();
    var container = element.querySelector(".bultr-multi-button-container");
    container.classList.add(current_device);
    var settings = JSON.parse(container.dataset.settings);
    var layout = getLayoutValue(settings[current_device]);
    container.classList.remove("bultr-btn-layout-horizontal", "bultr-btn-layout-vertical");
    container.classList.add("bultr-btn-layout-" + layout);
    window.addEventListener("resize", function (e) {
      var _container$classList;

      settings = JSON.parse(container.dataset.settings);
      var device = window.bultra.buGetBreakpoints();
      var layout = getLayoutValue(settings[device]);
      container.classList.remove("bultr-btn-layout-horizontal", "bultr-btn-layout-vertical");
      container.classList.add("bultr-btn-layout-" + layout);

      (_container$classList = container.classList).remove.apply(_container$classList, _toConsumableArray(window.bultra.buGetDevices()));

      container.classList.add(device);
    });
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && progressBar();
});

function progressBar() {
  var progressBars = bricksQuerySelectorAll(document, '.brxe-wpvbu-progress-bar');
  progressBars.forEach(function (element) {
    var id = element.getAttribute('id');
    var $wrapper = element.querySelector(".bultr-progress-bar");
    var skill_value = $wrapper.getAttribute("data-value");
    var skin = $wrapper.getAttribute("data-layout");
    var skillELem = $wrapper.querySelector(".bultr-pb-bar-skill");
    var valueELem = $wrapper.querySelector(".bultr-pb-bar-value");
    var prgBar = $wrapper.querySelector(".bultr-pb-bar");
    var prgInner = $wrapper.querySelector(".bultr-pb-bar-inner");

    if (skin === "layout1") {
      prgInner.style.width = skill_value;
    }

    if (skin === "layout2") {
      prgInner.style.width = skill_value;
    }

    if (skin === "layout3") {
      if (valueELem && !valueELem.classList.add("bultr-pb-bar-value--aligned-value")) {
        valueELem.classList.add("bultr-pb-bar-value--aligned-value");
        valueELem.style.left = skill_value;
      }

      prgInner.style.width = skill_value;
    }

    if (skin === "layout4") {
      if (valueELem && !valueELem.classList.add("bultr-pb-bar-value--aligned-value") && !prgBar.classList.add("bultr-pb-bar--no-overflow")) {
        valueELem.classList.add("bultr-pb-bar-value--aligned-value");
        prgBar.classList.add("bultr-pb-bar--no-overflow");
        valueELem.style.left = skill_value;
      }

      prgInner.style.width = skill_value;
    }

    if (skin === "layout5") {
      if (valueELem && !valueELem.classList.add("bultr-pb-bar-value--aligned-value")) {
        valueELem.classList.add("bultr-pb-bar-value--aligned-value");
        valueELem.style.left = skill_value;
      }

      prgInner.style.width = skill_value;
    }

    var waypoint = new Waypoint({
      element: $wrapper,
      handler: function handler(direction) {
        if (direction == "down") {
          if (valueELem && !valueELem.classList.contains("js-animated")) {
            valueELem.classList.add("js-animated");
          }

          if (prgInner && !prgInner.classList.contains("js-animated")) {
            prgInner.classList.add("js-animated");
          }

          if (skillELem && !skillELem.classList.contains("js-animated")) {
            skillELem.classList.add("js-animated");
          }
        }
      },
      offset: "bottom-in-view"
    });
  });
}

;

function bricksUltraTeamMember() {
  bricksQuerySelectorAll(document, ".brxe-wpvbu-team-member").forEach(function (item) {
    var _item$classList, _window$bricksUltra$i;

    var mainSlider = item.querySelector(".bultr-team-members");
    var device = window.bultra.buGetBreakpoints();

    (_item$classList = item.classList).remove.apply(_item$classList, _toConsumableArray(window.bultra.buGetDevices()));

    item.classList.add(device);
    (_window$bricksUltra$i = window.bricksUltra[item.id]) === null || _window$bricksUltra$i === void 0 ? void 0 : _window$bricksUltra$i.destroy();

    if (mainSlider) {
      if (mainSlider.classList.contains("bultr-slider")) {
        mainSlider.classList.add("splide");
        var teamSlider = new Splide(mainSlider);
        window.bricksUltra[item.id] = teamSlider;
        var bar = item.querySelector(".bultr-slider-progress-bar");

        if (bar) {
          // Update the bar width:
          teamSlider.on("mounted move", function () {
            var end = teamSlider.Components.Controller.getEnd() + 1;
            bar.style.width = String(100 * (teamSlider.index + 1) / end) + "%";
          });
        }

        teamSlider.mount();
      }
    }
  });
}

var timer = 0;
window.addEventListener("resize", function (t) {
  clearTimeout(timer);
  timer = setTimeout(resizeStoped, 300);
});

function resizeStoped() {
  bricksUltraTeamMember();
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bricksUltraTeamMember();
});
{
  var _resizeStoped = function _resizeStoped() {
    ThumbnailSlider();
  };

  var ThumbnailSlider = function ThumbnailSlider() {
    var device = window.bultra.buGetBreakpoints();
    document.querySelectorAll(".bultr-splide").forEach(function (e) {
      var _e$parentElement$clas;

      e.classList.add("splide");

      (_e$parentElement$clas = e.parentElement.classList).remove.apply(_e$parentElement$clas, _toConsumableArray(window.bultra.buGetDevices()));

      e.parentElement.classList.add(device);
    });
    document.querySelectorAll(".bultr-thumb-slider-wrapper").forEach(function (e) {
      var _window$bricksUltra$e;

      var slider = null;
      var thumbs = null;
      var mainSlider = e.querySelector(".bultr-main-slider");
      var thumbSlider = e.querySelector(".bultr-thumb-slider");
      var thumbOptions = JSON.parse(thumbSlider.dataset.splide1);
      thumbOptions.width = thumbOptions.width + "%";

      for (var k in thumbOptions.breakpoints) {
        thumbOptions.breakpoints[k].width = thumbOptions.breakpoints[k].width + "%";

        if (k < 768) {
          delete thumbOptions.fixedWidth;
        }
      }

      (_window$bricksUltra$e = window.bricksUltra[e.parentElement.id]) === null || _window$bricksUltra$e === void 0 ? void 0 : _window$bricksUltra$e.destroy();
      slider = new Splide(mainSlider);
      thumbs = new Splide(thumbSlider, thumbOptions); //window.bricksUltra[e.parentElement.id] = slider;

      var bar = e.querySelector(".bultr-slider-progress-bar");

      if (bar) {
        // Update the bar width:
        slider.on("mounted move", function () {
          var end = slider.Components.Controller.getEnd() + 1;
          bar.style.width = String(100 * (slider.index + 1) / end) + "%";
        });
      }

      slider.sync(thumbs);
      slider.mount();
      thumbs.mount();

      if (bar) {
        e.querySelector(".splide__track").style.height = "unset";
      }
    });
  };

  document.addEventListener("DOMContentLoaded", function (t) {
    bricksIsFrontend && ThumbnailSlider();
  });
  var timer = 0;
  window.addEventListener("resize", function (t) {
    clearTimeout(timer);
    timer = setTimeout(_resizeStoped, 300);
  });
}

function bricksUltraTimeline() {
  var timelines = bricksQuerySelectorAll(document, '.bultr-timeline');

  if (timelines.length) {
    timelines.forEach(function (timeline) {
      new TimeLine(timeline);
    });
  }
}

document.addEventListener('DOMContentLoaded', function (t) {
  bricksIsFrontend && bricksUltraTimeline();
});

function bricksUltraSwiperslider() {
  var wooWrapper = bricksQuerySelectorAll(document, ".bultr-woo-wrapper");
  wooWrapper.forEach(function (element) {
    var _element$classList2, _window$bricksUltra$e2;

    // slider
    var mainSlider = element.querySelector(".bultr-products");
    var device = window.bultra.buGetBreakpoints();
    window.addEventListener('resize', function () {
      onResize();
    });

    function onResize() {
      var deviceFun = window.bultra.buGetBreakpoints();
    } //getting the smallest device


    var devicearr = window.bultra.buGetDevices();
    var devicelen = devicearr.length;
    var smallestdevice = devicearr[devicelen - 1];

    (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(window.bultra.buGetDevices()));

    element.classList.add(device);
    (_window$bricksUltra$e2 = window.bricksUltra[element.id]) === null || _window$bricksUltra$e2 === void 0 ? void 0 : _window$bricksUltra$e2.destroy();

    if (mainSlider) {
      if (mainSlider.classList.contains('bultr-layout-slider')) {
        mainSlider.classList.add('bricks-swiper-container');
        swiperJson = mainSlider.getAttribute('data-script-args');
        slide_data = JSON.parse(swiperJson); //getting slide_data into variables

        slideEffect = slide_data.effect;
        perView = slide_data.hasOwnProperty('sliderPerView') ? parseInt(slide_data.sliderPerView) : 3;
        perGroup = slide_data.hasOwnProperty('slidesPerGroup') ? parseInt(slide_data.slidesPerGroup) : 1;
        spaceBtw = slide_data.hasOwnProperty('spaceBetween') ? parseInt(slide_data.spaceBetween) : 10;
        center = slide_data.centeredSlides;
        slideSpeed = slide_data.speed;
        auto = slide_data.autoheight;
        loop = slide_data.loop;
        grab = slide_data.grabCursor; // assigning variables to swiperdata

        var swiperData = {
          effect: slideEffect,
          slidesPerView: perView,
          slidesPerGroup: perGroup,
          spaceBetween: spaceBtw,
          loop: loop,
          speed: slideSpeed,
          centeredSlides: center,
          autoHeight: auto,
          grabCursor: true
        }; //Breakpoints

        if (slide_data.hasOwnProperty('breakpoints') && slide_data.breakpoints !== '') {
          breakpointData = slide_data.breakpoints;
          breakpoints = slide_data.breakpoints;

          for (var key in breakpoints) {
            var dd = breakpoints[key].deviceLabel; //deleting smallest device array from breakpoints and getting its data to set for default

            if (dd === smallestdevice) {
              smallDeviceKey = breakpoints[key];
              swiperData.slidesPerView = smallDeviceKey.slidesPerView;
              swiperData.slidesPerGroup = parseInt(smallDeviceKey.slidesPerGroup);
              delete breakpointData[key];
            }
          } //removing device label from object


          for (var _key2 in breakpointData) {
            delete breakpointData[_key2].deviceLabel;
          }

          swiperData.breakpoints = breakpointData;
        } //navigation


        if (slide_data.hasOwnProperty('navigation') && slide_data.navigation !== '') {
          arrownav = slide_data.navigation;

          if (arrownav.hasOwnProperty('nextEl') && arrownav.nextEl !== '') {
            nextel = arrownav.nextEl;
          }

          if (arrownav.hasOwnProperty('prevEl') && arrownav.prevEl !== '') {
            prevel = arrownav.prevEl;
          }

          swiperData.navigation = {
            nextEl: nextel,
            prevEl: prevel
          };
        } //pagination


        if (slide_data.hasOwnProperty('pagination') && slide_data.pagination !== '') {
          pagenav = slide_data.pagination;

          if (pagenav.hasOwnProperty('el') && pagenav.el !== '') {
            pagination_class = pagenav.el;
          }

          if (pagenav.hasOwnProperty('clickable') && pagenav.clickable !== '') {
            dotClick = pagenav.clickable;
          }

          if (pagenav.hasOwnProperty('dynamicBullets') && pagenav.dynamicBullets !== '') {
            dotDynamic = pagenav.dynamicBullets;
          }

          if (pagenav.hasOwnProperty('type') && pagenav.type !== '') {
            dotType = pagenav.type;
          }

          swiperData.pagination = {
            el: pagination_class,
            type: dotType,
            clickable: dotClick,
            dynamicBullets: dotDynamic
          };
        } //autoplay


        if (slide_data.hasOwnProperty('autoplay') && slide_data.autoplay !== '') {
          autoplay = slide_data.autoplay;

          if (autoplay.hasOwnProperty('delay') && slide_data.autoplay.delay !== '' && slide_data.autoplay.delay !== null && slide_data.autoplay.delay !== undefined) {
            delay = slide_data.autoplay.delay;
          }

          if (autoplay.hasOwnProperty('pauseOnMouseEnter') && slide_data.autoplay.pauseOnMouseEnter !== '' && slide_data.autoplay.pauseOnMouseEnter !== null && slide_data.autoplay.pauseOnMouseEnter !== undefined) {
            pauseHover = slide_data.autoplay.pauseOnMouseEnter;
          }

          if (autoplay.hasOwnProperty('stopOnLastSlide') && slide_data.autoplay.stopOnLastSlide !== '' && slide_data.autoplay.stopOnLastSlide !== null && slide_data.autoplay.stopOnLastSlide !== undefined) {
            lastSlide = slide_data.autoplay.stopOnLastSlide;
          }

          if (autoplay.hasOwnProperty('disableOnInteraction') && slide_data.autoplay.disableOnInteraction !== '' && slide_data.autoplay.disableOnInteraction !== null && slide_data.autoplay.disableOnInteraction !== undefined) {
            disableinteraction = slide_data.autoplay.disableOnInteraction;
          }

          swiperData.autoplay = {
            delay: delay,
            pauseOnMouseEnter: pauseHover,
            stopOnLastSlide: lastSlide,
            disableOnInteraction: disableinteraction
          };
        } //effects coverflow , cube effect parameters


        switch (swiperData.effect) {
          case "coverflow":
            if (slide_data.hasOwnProperty('coverflowEffect') && slide_data.coverflowEffect !== '' && slide_data.coverflowEffect !== null && slide_data.coverflowEffect !== undefined) {
              coverEffect = slide_data.coverflowEffect;

              if (coverEffect.hasOwnProperty('slideshadow') && slide_data.coverflowEffect.slideshadow !== '' && slide_data.coverflowEffect.slideshadow !== null && slide_data.coverflowEffect.slideshadow !== undefined) {
                cshadow = slide_data.coverflowEffect.slideshadow;
              }

              swiperData.coverflowEffect = {
                slideShadows: cshadow
              };
            }

            break;

          case "cube":
            if (slide_data.hasOwnProperty("cubeEffect") && slide_data.cubeEffect !== '' && slide_data.cubeEffect !== null && slide_data.cubeEffect !== undefined) {
              cubeeffect = slide_data.cubeEffect;

              if (cubeeffect.hasOwnProperty('slideshadow') && slide_data.cubeEffect.slideshadow !== '' && slide_data.cubeEffect.slideshadow !== null && slide_data.cubeEffect.slideshadow !== undefined) {
                cslideshadow = slide_data.cubeEffect.slideshadow;
              }

              if (cubeeffect.hasOwnProperty('shadow') && slide_data.cubeEffect.shadow !== '' && slide_data.cubeEffect.shadow !== null && slide_data.cubeEffect.shadow !== undefined) {
                ccshadow = slide_data.cubeEffect.shadow;
              }

              if (cubeeffect.hasOwnProperty('shadowOffset') && slide_data.cubeEffect.shadowOffset !== '' && slide_data.cubeEffect.shadowOffset !== null && slide_data.cubeEffect.shadowOffset !== undefined) {
                coffset = slide_data.cubeEffect.shadowOffset;
              }

              if (cubeeffect.hasOwnProperty('shadowScale') && slide_data.cubeEffect.shadowScale !== '' && slide_data.cubeEffect.shadowScale !== null && slide_data.cubeEffect.shadowScale !== undefined) {
                cscale = slide_data.cubeEffect.shadowScale;
              }

              swiperData.cubeEffect = {
                slideShadows: cslideshadow,
                shadow: ccshadow,
                shadowOffset: coffset,
                shadowScale: cscale
              };
            }

            break;
        }

        var wooSlider = new Swiper(mainSlider, swiperData);
        window.bricksUltra[element.id] = wooSlider;
      }
    } // popup


    cards = jQuery('.open-popup-link');
    popup = jQuery('.open-popup-link').magnificPopup({
      type: 'inline',
      midClick: true,
      mainClass: "bultr-woo-popup bultr-woo-box-" + jQuery('.open-popup-link').data('qvid'),
      overflowY: 'hidden',
      alignTop: false,
      callbacks: {
        open: function open() {
          jQuery('.woocommerce-product-gallery').each(function () {
            jQuery(this).wc_product_gallery();
          }); // trigger window.resize event

          jQuery(window).trigger("resize");
        }
      }
    });
    modalButton = element.querySelector('.bultr-woo-quickBtn'); // -----------------buy now button-----------------

    buyNowBtn = element.querySelectorAll('.bultr-woo-buy-now');
    buyNowBtn.forEach(function (btn) {
      btn.addEventListener('click', function (e) {
        e.preventDefault();
        var productId = btn.getAttribute('data-product-id');
        var quantity = btn.getAttribute('data-quantity');
        var checkout = bricksUltra.checkout_url;
        var params = new URLSearchParams(); //pass parameters to php

        params.append('action', 'bu_add_to_cart');
        params.append('product_id', productId);
        params.append('quantity', quantity);
        params.append('bu_nonce', bricksUltra.nonce); //send ajax request to php

        fetch(bricksUltra.ajaxurl, {
          method: 'post',
          credentials: 'same-origin',
          body: params
        }).then(function (response) {
          return response.json();
        }).then(function (data) {
          //redirect to checkout page
          window.location.href = checkout;
        })["catch"](function (error) {
          console.error('Error:', error);
        });
      });
    });
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bricksUltraSwiperslider();
});

function bricksUltraSwiperCategory() {
  var wooWrapper = bricksQuerySelectorAll(document, ".brxe-wpvbu-woo-category");
  wooWrapper.forEach(function (element) {
    var _element$classList3, _window$bricksUltra$e3;

    var stackDevice = element.getAttribute("data-stack"); // console.log("stack device",stackDevice);

    var mainSlider = element.querySelector(".bultr-category");
    var device = window.bultra.buGetBreakpoints();
    window.addEventListener('resize', function () {
      onResize();
    });

    function onResize() {
      var deviceFun = window.bultra.buGetBreakpoints();
    } //getting the smallest device


    var devicearr = window.bultra.buGetDevices();
    var devicelen = devicearr.length;
    var smallestdevice = devicearr[devicelen - 1];

    (_element$classList3 = element.classList).remove.apply(_element$classList3, _toConsumableArray(window.bultra.buGetDevices()));

    element.classList.add(device);
    (_window$bricksUltra$e3 = window.bricksUltra[element.id]) === null || _window$bricksUltra$e3 === void 0 ? void 0 : _window$bricksUltra$e3.destroy();

    if (mainSlider) {
      if (mainSlider.classList.contains('bultr-slider-layout')) {
        mainSlider.classList.add('bricks-swiper-container');
        swiperJson = mainSlider.getAttribute('data-script-args');
        slide_data = JSON.parse(swiperJson); // console.log("slidedata  ",slide_data);
        //getting slide_data into variables

        slideEffect = slide_data.effect;
        perView = slide_data.hasOwnProperty('sliderPerView') ? parseInt(slide_data.sliderPerView) : 3;
        perGroup = slide_data.hasOwnProperty('slidesPerGroup') ? parseInt(slide_data.slidesPerGroup) : 1;
        spaceBtw = slide_data.hasOwnProperty('spaceBetween') ? parseInt(slide_data.spaceBetween) : 10;
        center = slide_data.centeredSlides;
        slideSpeed = slide_data.speed;
        auto = slide_data.autoheight;
        loop = slide_data.loop;
        grab = slide_data.grabCursor; // assigning variables to swiperdata

        var swiperData = {
          effect: slideEffect,
          slidesPerView: perView,
          slidesPerGroup: perGroup,
          spaceBetween: spaceBtw,
          loop: loop,
          speed: slideSpeed,
          centeredSlides: center,
          autoHeight: auto,
          grabCursor: true
        }; //Breakpoints

        if (slide_data.hasOwnProperty('breakpoints') && slide_data.breakpoints !== '') {
          breakpointData = slide_data.breakpoints;
          breakpoints = slide_data.breakpoints;

          for (var key in breakpoints) {
            var dd = breakpoints[key].deviceLabel; //deleting smallest device array from breakpoints and getting its data to set for default

            if (dd === smallestdevice) {
              smallDeviceKey = breakpoints[key];
              swiperData.slidesPerView = smallDeviceKey.slidesPerView;
              swiperData.slidesPerGroup = smallDeviceKey.slidesPerGroup;
              delete breakpointData[key];
            }
          } //removing device label from object


          for (var _key3 in breakpointData) {
            delete breakpointData[_key3].deviceLabel;
          }

          swiperData.breakpoints = breakpointData;
        } //navigation


        if (slide_data.hasOwnProperty('navigation') && slide_data.navigation !== '') {
          arrownav = slide_data.navigation;

          if (arrownav.hasOwnProperty('nextEl') && arrownav.nextEl !== '') {
            nextel = arrownav.nextEl;
          }

          if (arrownav.hasOwnProperty('prevEl') && arrownav.prevEl !== '') {
            prevel = arrownav.prevEl;
          }

          swiperData.navigation = {
            nextEl: nextel,
            prevEl: prevel
          };
        } //pagination


        if (slide_data.hasOwnProperty('pagination') && slide_data.pagination !== '') {
          pagenav = slide_data.pagination;

          if (pagenav.hasOwnProperty('el') && pagenav.el !== '') {
            pagination_class = pagenav.el;
          }

          if (pagenav.hasOwnProperty('clickable') && pagenav.clickable !== '') {
            dotClick = pagenav.clickable;
          }

          if (pagenav.hasOwnProperty('dynamicBullets') && pagenav.dynamicBullets !== '') {
            dotDynamic = pagenav.dynamicBullets;
          }

          if (pagenav.hasOwnProperty('type') && pagenav.type !== '') {
            dotType = pagenav.type;
          }

          swiperData.pagination = {
            el: pagination_class,
            type: dotType,
            clickable: dotClick,
            dynamicBullets: dotDynamic
          };
        } //autoplay


        if (slide_data.hasOwnProperty('autoplay') && slide_data.autoplay !== '') {
          autoplay = slide_data.autoplay;

          if (autoplay.hasOwnProperty('delay') && slide_data.autoplay.delay !== '' && slide_data.autoplay.delay !== null && slide_data.autoplay.delay !== undefined) {
            delay = slide_data.autoplay.delay;
          }

          if (autoplay.hasOwnProperty('pauseOnMouseEnter') && slide_data.autoplay.pauseOnMouseEnter !== '' && slide_data.autoplay.pauseOnMouseEnter !== null && slide_data.autoplay.pauseOnMouseEnter !== undefined) {
            pauseHover = slide_data.autoplay.pauseOnMouseEnter;
          }

          if (autoplay.hasOwnProperty('stopOnLastSlide') && slide_data.autoplay.stopOnLastSlide !== '' && slide_data.autoplay.stopOnLastSlide !== null && slide_data.autoplay.stopOnLastSlide !== undefined) {
            lastSlide = slide_data.autoplay.stopOnLastSlide;
          }

          if (autoplay.hasOwnProperty('disableOnInteraction') && slide_data.autoplay.disableOnInteraction !== '' && slide_data.autoplay.disableOnInteraction !== null && slide_data.autoplay.disableOnInteraction !== undefined) {
            disableinteraction = slide_data.autoplay.disableOnInteraction;
          }

          swiperData.autoplay = {
            delay: delay,
            pauseOnMouseEnter: pauseHover,
            stopOnLastSlide: lastSlide,
            disableOnInteraction: disableinteraction
          };
        } //effects coverflow , cube effect parameters


        switch (swiperData.effect) {
          case "fade":
            swiperData.fadeEffect = {
              crossFade: true
            };

          case "coverflow":
            if (slide_data.hasOwnProperty('coverflowEffect') && slide_data.coverflowEffect !== '' && slide_data.coverflowEffect !== null && slide_data.coverflowEffect !== undefined) {
              coverEffect = slide_data.coverflowEffect;

              if (coverEffect.hasOwnProperty('slideshadow') && slide_data.coverflowEffect.slideshadow !== '' && slide_data.coverflowEffect.slideshadow !== null && slide_data.coverflowEffect.slideshadow !== undefined) {
                cshadow = slide_data.coverflowEffect.slideshadow;
              }

              swiperData.coverflowEffect = {
                // rotate: 40,
                // depth: 100,
                slideShadows: cshadow
              };
            }

            break;

          case "cube":
            if (slide_data.hasOwnProperty("cubeEffect") && slide_data.cubeEffect !== '' && slide_data.cubeEffect !== null && slide_data.cubeEffect !== undefined) {
              cubeeffect = slide_data.cubeEffect;

              if (cubeeffect.hasOwnProperty('slideshadow') && slide_data.cubeEffect.slideshadow !== '' && slide_data.cubeEffect.slideshadow !== null && slide_data.cubeEffect.slideshadow !== undefined) {
                cslideshadow = slide_data.cubeEffect.slideshadow;
              }

              if (cubeeffect.hasOwnProperty('shadow') && slide_data.cubeEffect.shadow !== '' && slide_data.cubeEffect.shadow !== null && slide_data.cubeEffect.shadow !== undefined) {
                ccshadow = slide_data.cubeEffect.shadow;
              }

              if (cubeeffect.hasOwnProperty('shadowOffset') && slide_data.cubeEffect.shadowOffset !== '' && slide_data.cubeEffect.shadowOffset !== null && slide_data.cubeEffect.shadowOffset !== undefined) {
                coffset = slide_data.cubeEffect.shadowOffset;
              }

              if (cubeeffect.hasOwnProperty('shadowScale') && slide_data.cubeEffect.shadowScale !== '' && slide_data.cubeEffect.shadowScale !== null && slide_data.cubeEffect.shadowScale !== undefined) {
                cscale = slide_data.cubeEffect.shadowScale;
              }

              swiperData.cubeEffect = {
                slideShadows: cslideshadow,
                shadow: ccshadow,
                shadowOffset: coffset,
                shadowScale: cscale
              };
            }

            break;
        }

        var wooSlider = new Swiper(mainSlider, swiperData);
        window.bricksUltra[element.id] = wooSlider; // console.log("wooslidercat", wooSlider);
      }
    }

    categoryCard = element.querySelectorAll('.bultr-category-card'); // console.log("card", categoryCard);

    var index = devicearr.indexOf(stackDevice); // console.log('index',index);

    var result = devicearr.slice(index); // console.log("result", result);

    if (result !== null && result !== undefined && result.includes(device)) {
      categoryCard.forEach(function (card) {
        card.classList.add('bultr-stack');
      }); // productCard.classList.add('bultr-stack');
      // console.log("items to be stacked");
    }
  });
} // var timer = 0;
// window.addEventListener("resize", function (t) {
//   clearTimeout(timer);
//   timer = setTimeout(resizeStoped, 300);
// });
// function resizeStoped() {
//   bricksUltraTeamMember();
// }


document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bricksUltraSwiperCategory();
});

function bultrTwitter() {
  var twitterElemets = bricksQuerySelectorAll(document, '.brxe-wpvbu-twitter');
  twitterElemets.forEach(function (element) {
    twttr.widgets.load();
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && buUnfold();
});

function buUnfold() {
  var unfolds = bricksQuerySelectorAll(document, '.brxe-wpvbu-unfold');
  unfolds.forEach(function (element) {
    var id = element.getAttribute('id');
    var morebtn = element.querySelectorAll(".bultr-uf-btn-show");
    var lessbtn = element.querySelectorAll(".bultr-uf-btn-hide");
    var content = element.querySelector(".bultr-uf-content-wrap");
    var fixedheight = content.offsetHeight;
    morebtn.forEach(function (button) {
      button.addEventListener('click', function () {
        contentWrap = element.querySelector('[data-ufid]');
        var fheight = contentWrap.scrollHeight;
        contentWrap.classList.add('bultr-uf-open');
        contentWrap.classList.remove('bultr-uf-close');
        contentWrap.style.height = fheight + "px";
      });
    });
    lessbtn.forEach(function (button) {
      button.addEventListener('click', function () {
        var buttonId = this.getAttribute('data-id');
        contentWrap = element.querySelector("[data-ufid=".concat(buttonId, "]"));
        contentWrap.classList.remove('bultr-uf-open');
        contentWrap.classList.add('bultr-uf-close');
        contentWrap.style.height = fixedheight + "px";
      });
    });
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && buVideoBox();
});

function buVideoBox() {
  var videobox = bricksQuerySelectorAll(document, '.brxe-wpvbu-video-box');
  videobox.forEach(function (wrapper) {
    var id = wrapper.getAttribute('id');
    var videoType = wrapper.getAttribute('data-video-type-vb');
    contentWrap = wrapper.querySelector('.bultr-video-content');
    isLightbox = '';
    isAutoplay = '';
    isSticky = '';

    if (wrapper.hasAttribute("data-vb-lightbox")) {
      isLightbox = wrapper.getAttribute('data-vb-lightbox');
    }

    if (wrapper.hasAttribute("data-vb-autoplay")) {
      isAutoplay = wrapper.getAttribute('data-vb-autoplay');
    }

    if (contentWrap.hasAttribute('data-video-sticky-vb')) {
      isSticky = contentWrap.getAttribute('data-video-sticky-vb');
    } //creating iframe if lightbox is not true


    if (isLightbox !== 'true') {
      if (bricksData.isAdmin != 1) {
        wrapper.addEventListener('click', function (e) {
          createIframes(this);
        });
      }
    } //check autoplay


    if (isAutoplay == 'true') {
      var waypoint = new Waypoint({
        element: wrapper,
        handler: function handler(direction) {
          if (direction == 'down') {
            if (bricksData.isAdmin != 1) {
              createIframes(wrapper);
            }
          }
        },
        offset: 'bottom-in-view'
      });
    }

    if (isLightbox === 'true') {
      var wrap = wrapper.querySelector('.bultr-video-play');
      var galleryId = wrap.getAttribute('data-vb-galleryid');

      if (galleryId == null || galleryId == '') {
        galleryId = '1';
      }

      var plugins = [lgVideo, lgHash];

      if (wrap.hasAttribute('data-vb-fullscreen') && wrap.getAttribute('data-vb-fullscreen') === 'true') {
        plugins.push(lgFullscreen);
      }

      if (wrap.hasAttribute('data-vb-share') && wrap.getAttribute('data-vb-share') === 'true') {
        plugins.push(lgShare);
      }

      var videoObject = {
        'selector': '.bultr-video-play',
        'plugins': plugins,
        'galleryId': galleryId,
        'download': false,
        'counter': false,
        videojs: true,
        videojsOptions: {
          muted: true
        }
      };

      if (videoType != 'hosted') {
        videoObject["".concat(videoType, "PlayerParams")] = JSON.parse(wrap.getAttribute('data-params'));
      } else {
        videoObject['videojsOptions'] = JSON.parse(wrap.getAttribute('data-params'));
      }

      lightGallery(wrapper, videoObject);
    } //sticky settings


    if (isSticky === 'true') {
      stickyWrap = wrapper.querySelector('.bultr-video-sticky');

      if (bricksData.isAdmin == 1) {
        if (stickyWrap.getAttribute('data-editor-sticky-preview') != 'true') {
          return;
        }
      }

      var bu_waypoint = new Waypoint({
        element: wrapper,
        handler: function handler(direction) {
          if (direction == 'down') {
            stickyWrap.classList.remove('bultr-sticky-hide');
            stickyWrap.classList.add('bultr-sticky-apply');
          } else {
            stickyWrap.classList.add('bultr-sticky-hide');
            stickyWrap.classList.remove('bultr-sticky-apply');

            if (stickyWrap.classList.contains('bultr-sticky-hide')) {
              notSticky = wrapper.querySelector('.bultr-video-content');
              notSticky.removeAttribute("style");
            }
          }

          if (stickyWrap.hasAttribute('data-sticky-draggable')) {
            if (stickyWrap.getAttribute('data-sticky-draggable') === 'true') {
              if (stickyWrap.classList.contains('bultr-sticky-apply')) {
                budraggableElement(wrapper);
              }
            }
          }
        }
      });
      var closeBtn = contentWrap.querySelector('.bultr-vbsticky-close-btn');

      if (closeBtn != null) {
        closeBtn.addEventListener('click', function (e) {
          e.stopPropagation();
          stickyWrap.classList.add('bultr-sticky-hide');
          stickyWrap.classList.remove('bultr-sticky-apply');
        });
      }
    } //creating iframes


    function createIframes(ele) {
      var videoType = ele.getAttribute('data-video-type-vb');
      var playWrapper = ele.querySelector('.bultr-video-play');
      var url = '';

      if (videoType != 'hosted') {
        url = playWrapper.getAttribute('data-src-vb');
        var isIframe = ele.querySelector('iframe');

        if (isIframe == null) {
          var iframe = document.createElement('iframe');
          iframe.classList.add('bultr-video-iframe');
          iframe.setAttribute('src', url);
          iframe.setAttribute('frameborder', '0');
          iframe.setAttribute('allowfullscreen', '1');
          iframe.setAttribute('allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture');
          playWrapper.innerHTML = '';
          playWrapper.append(iframe);
        }
      } else {
        if (videoType == 'hosted') {
          var videootag = wrapper.querySelector('.bultr-hosted-video');

          if (videootag == null) {
            var hostedurl = wrapper.getAttribute('data-vbhosted-url');
            var hostedParam = wrapper.getAttribute('data-vbhosted-param');

            if (hostedParam.length > 0) {
              hostedParam = hostedParam.split(' ');
            }

            var hostedHtml = document.createElement('video');
            hostedHtml.classList.add('bultr-hosted-video');
            hostedHtml.setAttribute('src', hostedurl);

            if (Array.isArray(hostedParam) && hostedParam.length > 0) {
              hostedParam.forEach(function (attribute) {
                if (attribute !== 'nodownload') {
                  hostedHtml.setAttribute(attribute, '');
                } else {
                  hostedHtml.setAttribute('controlslist', attribute);
                }
              });
            }

            if (!hostedHtml.hasAttribute('autoplay')) {
              hostedHtml.setAttribute('autoplay', '');
            }

            playWrapper.innerHTML = '';
            playWrapper.append(hostedHtml);
          }
        }
      }
    } // draggable element


    function budraggableElement(ele) {
      var pos1 = 0,
          pos2 = 0,
          pos3 = 0,
          pos4 = 0;
      ele.querySelector('.bultr-video-content').onmousedown = budragMouseDown;
      innerWrap = ele.querySelector('.bultr-video-content');

      function budragMouseDown(e) {
        innerWrap.classList.add('bultr-draggable-ele');
        e = e || window.event;
        e.preventDefault();
        pos3 = e.clientX;
        pos4 = e.clientY;
        wrapper.onmouseup = bucloseDragElement;
        wrapper.onmousemove = buelementDrag;
      }

      function bucloseDragElement(e) {
        wrapper.onmouseup = null;
        wrapper.onmousemove = null;
        innerWrap.classList.remove('bultr-draggable-ele');
      }

      function buelementDrag(e) {
        e = e || window.event;
        e.preventDefault();
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        innerWrap.style.top = innerWrap.offsetTop - pos2 + 'px';
        innerWrap.style.left = innerWrap.offsetLeft - pos1 + 'px';
      }
    }
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  if (bricksIsFrontend) {
    bu_testimonial_slider();
  }
});

function bu_testimonial_slider() {
  var ts = bricksQuerySelectorAll(document, '.brxe-wpvbu-testimonial-slider ');
  ts.forEach(function (element) {
    var collection = element.querySelector('.bultr-ts-collection');
    swiperdata = collection.getAttribute('data-script-args');
    new SwiperBase(element, collection, swiperdata);

    function handle_breakpoint() {
      var data = element.querySelector('.bultr-ts-container ');
      var imgElements = element.querySelectorAll('.bultr-ts-image');
      var contentElements = element.querySelectorAll('.bultr-ts-content-section');
      var breakpoints = parseInt(data.getAttribute('data-stacked'));
      var currentWindowWidth = window.innerWidth;

      if (currentWindowWidth <= breakpoints) {
        imgElements.forEach(function (img) {
          img.style.display = 'none';
          contentElements.forEach(function (content) {
            content.style.padding = '50px';
          });
        });
      } else {
        imgElements.forEach(function (img) {
          img.style.display = 'flex';
        });
      }
    }

    handle_breakpoint();
    window.addEventListener('resize', handle_breakpoint);
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && bu_instagram_feed();
});
window.addEventListener('resize', function () {
  bu_instagram_feed();
});

function bu_instagram_feed() {
  var instaFeed = bricksQuerySelectorAll(document, '.brxe-wpvbu-instagram-feed');
  instaFeed.forEach(function (element) {
    var elementId = element.getAttribute('id');
    var container = element.querySelector('.bultr-insta-container');
    var collection = element.querySelector('.bultr-insta-collection');

    if (collection.classList.contains('bultr-islightbox')) {
      checkLightbox();
    }

    function checkLightbox() {
      if (!collection.classList.contains('bultr-islightbox')) {
        return;
      }

      var selector = collection.querySelector('.bultr-insta-link');
      var data = collection.getAttribute('data-insta-lightgallery');
      var lightboxSettings = JSON.parse(data);
      $plugins = [lgVideo, lgShare, lgZoom, lgHash, lgRotate, lgFullscreen, lgThumbnail];
      var lightboxObject = {
        'selector': '.bultr-insta-link',
        'plugins': $plugins
      };
      lightboxObject = _objectSpread(_objectSpread({}, lightboxObject), lightboxSettings);
      lightGallery(element, lightboxObject);
    }

    if (container.classList.contains('bultr-iscarousel')) {
      checkCarousel();
    }

    function checkCarousel() {
      if (!container.classList.contains('bultr-iscarousel')) {
        return;
      }

      swiperdata = collection.getAttribute('data-script-args');
      new SwiperBase(element, collection, swiperdata);
    }

    if (container.classList.contains("bultr-insta-layout-masonry")) {
      createMasonry();
    }

    function createMasonry() {
      var items = collection.querySelectorAll('.bultr-insta-items:not(.bultr-load-hide)');
      items.forEach(function (item, index) {
        item.style.marginTop = 0;
      });
      var heights = [];
      var distanceFromTop = 0;
      distanceFromTop = collection.getBoundingClientRect().top;
      var gridColumns = getComputedStyle(collection).gridTemplateColumns;
      var coulmnCount = gridColumns.split(' ').length;
      var rowgap = parseInt(getComputedStyle(collection).rowGap);
      distanceFromTop += parseInt(getComputedStyle(collection).marginTop, 10);
      items.forEach(function (item, index) {
        var row = Math.floor(index / coulmnCount);
        var itemHeight = item.getBoundingClientRect().height + rowgap;

        if (row) {
          var itemPosition = item.getBoundingClientRect();
          var indexAtRow = index % coulmnCount;
          var pullHeight = itemPosition.top - distanceFromTop - heights[indexAtRow];
          pullHeight *= -1;
          item.style.marginTop = pullHeight + 'px';
          heights[indexAtRow] += itemHeight;
        } else {
          // for first row
          heights.push(itemHeight);
          item.style.marginTop = '0';
        }

        item.style.visibility = 'visible';
      });
    }
  });
} // refresh cache buttton


var card = jQuery(document).on('click', ".bultr-refresh-cache-btn", function () {
  transient_key = 'bultr_insta_fetched_data';
  jQuery.ajax({
    url: bricksUltra.ajaxurl,
    dataType: 'json',
    method: 'post',
    data: {
      action: 'bultr_refresh_insta_cache',
      transient_key: transient_key
    },
    success: function success(res) {
      if (res.data) {
        view.container.renderer.view.container.renderer.render();
      } else {
        console.log('Refresh Cache:', res.data);
      }
    }
  });
});
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && buImageStack();
});

function buImageStack() {
  var imgStack = bricksQuerySelectorAll(document, '.brxe-wpvbu-image-stack');
  imgStack.forEach(function (element) {
    var items = element.querySelectorAll('.bultr-istk-item');
    var tippy_instance = '';
    items.forEach(function (item, index) {
      if (item.hasAttribute('data-tooltip-istk')) {
        tooltipText = item.getAttribute('data-tooltip-istk');
        placement = item.getAttribute('data-placement-istk');
        width = parseInt(item.getAttribute('data-width-istk'));
        tippy(item, {
          content: tooltipText,
          placement: placement,
          appendTo: 'parent',
          maxWidth: width,
          followCursor: "horizontal"
        });
      }

      var isLink = item.querySelector('.bultr-istk-link');

      if (isLink) {
        if (isLink.hasAttribute('data-lightbox')) {
          islightbox = isLink.getAttribute('data-lightbox');

          if (islightbox === 'true') {
            $plugins = [lgShare, lgZoom, lgHash, lgFullscreen];
            lightGallery(item, {
              'selector': '.bultr-istk-link',
              'plugins': $plugins
            });
          }
        }
      }

      if (item.classList.contains('bultr-istk-lottie')) {
        var lottie_ele = item.querySelector('.bultr-lottie');

        if (lottie_ele !== null) {
          var lottie_data = JSON.parse(lottie_ele.getAttribute('data-lottie-settings'));
          var lottie_id = lottie_ele.getAttribute('data-lottie-id');
          lottie.destroy(lottie_id);
          var lottie_animt = lottie.loadAnimation({
            container: lottie_ele,
            path: lottie_data.url,
            renderer: 'svg',
            loop: lottie_data.loop,
            autoplay: true,
            name: lottie_id
          });

          if (lottie_data.direction === true) {
            lottie_animt.setDirection(-1);
          }
        }
      }
    });
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  if (bricksIsFrontend) {
    add_to_cart_button();
  }
});

function add_to_cart_button() {
  var buttons = bricksQuerySelectorAll(document, '.brxe-wpvbu-woo-add-to-cart-button');
  buttons.forEach(function (element) {
    var atc = element.querySelectorAll(".bultr-add-to-cart");
    var viewCartButton = element.querySelectorAll(".bultr-view-cart-button");
    var settings = JSON.parse(element.getAttribute('data-settings'));
    atc.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault(); // Prevent form submission

        var productId = button.value; // Get the product ID from the button value attribute

        var quantityInput = element.querySelector('.input-text');
        var qty = quantityInput ? quantityInput.value : '1';
        var url = bricksUltra.ajaxurl;
        var nonce = bricksUltra.nonce;
        var data = new URLSearchParams();
        data.append('action', 'bu_add_to_cart');
        data.append('product_id', productId);
        data.append('quantity', qty);
        data.append('bu_nonce', nonce);
        fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: data
        }).then(function (response) {
          if (response.ok) {
            return response.text();
          } else {
            throw new Error('Error: ' + response.status);
          }
        }).then(function (responseText) {
          if (settings.redirect == 'cart') {
            var cart_url = bricksUltra.cart_url;
            window.location.href = cart_url;
            viewCartButton.forEach(function (btn) {
              btn.style.display = 'none';
            });
          } else if (settings.redirect == 'checkout') {
            var checkout_url = bricksUltra.checkout_url;
            window.location.href = checkout_url;
            viewCartButton.forEach(function (btn) {
              btn.style.display = 'none';
            });
          } else if (settings.redirect == 'stay') {
            viewCartButton.forEach(function (btn) {
              btn.style.display = 'flex';
            });
          } // render add to cart button icon before and after click


          var beforeClickIcon = button.querySelector('.bultr-before-click-icon');
          var afterClickIcon = button.querySelector('.bultr-after-click-icon');
          beforeClickIcon.style.display = 'none';
          afterClickIcon.style.display = 'inline-block'; // render add to cart button text before and after click

          button.classList.add('bultr-after');
          button.classList.remove('bultr-before');
        })["catch"](function (error) {
          console.log(error);
        });

        if (settings.hide_fields == true) {
          hideAddToCart();
        }
      });
    });

    function hideAddToCart() {
      var addToCartButton = element.querySelector('.bultr-add-to-cart');
      addToCartButton.style.display = 'none';
      var quantityInput = element.querySelector('.input-text');
      quantityInput.style.display = 'none';
      viewCartButton.forEach(function (btn) {
        btn.style.display = 'none';
      });
    }
  });
}

document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && ImageHostpot();
});

function ImageHostpot() {
  var markerWrapper = bricksQuerySelectorAll(document, ".bultr-ih-image-hotspot");
  markerWrapper.forEach(function (element) {
    var markers = element.querySelectorAll(".bultr-ih-marker");
    var tooltips = element.querySelectorAll(".bultr-ih-tooltip");
    var tippy_instance = [];
    var container = element.querySelectorAll(".bultr-ih-image-container");
    var control_settings = JSON.parse(container[0].dataset.settings);
    var tltpAnimation = control_settings['tltp_animation'];
    var animation = 'brx-animate-' + tltpAnimation;
    var preview = element.querySelectorAll(".bultr-ih-tooltip-show");
    var rep_preview = element.querySelectorAll(".bultr-ih-rep-tooltip-show");

    if (control_settings['trigger'] === 'hover') {
      control_settings['trigger'] = 'mouseenter focus';
    }

    markers.forEach(function (marker, index) {
      var tooltipContent = tooltips[index].innerHTML;

      if (preview.length > 0) {
        control_settings['trigger'] = 'manual';
      }

      if (rep_preview.length > 0) {
        control_settings['trigger'] = 'manual';
      }

      tippy_instance[index] = tippy(marker, {
        content: tooltipContent,
        appendTo: 'parent',
        placement: "auto",
        allowHTML: true,
        hideOnClick: false,
        arrow: true,
        maxWidth: 'none',
        trigger: control_settings['trigger'],
        onCreate: function onCreate(instance) {
          instance.popper.classList.add('bultr-add-tooltip'); // Check if instance.popper and instance.popper.childNodes exist before adding classes

          if (instance.popper && instance.popper.childNodes) {
            // Add 'brx-animated' class
            instance.popper.childNodes.forEach(function (childNode) {
              if (childNode.classList) {
                childNode.classList.add('bultr-ih-animation');
                childNode.classList.add('brx-animated');
                childNode.classList.add(animation);
              }
            });
          }

          var prev_button = instance.popper.querySelector('.bultr-ih-prev-tour');

          if (prev_button) {
            prev_button.addEventListener('click', function () {
              var tooltipid = this.getAttribute('data-tooltipid');
              var tippy_index = tooltipid - 1;
              tippy_instance[tippy_index].hide();
              tippy_instance[tippy_index - 1].show();
            });

            if (index == 0) {
              prev_button.style.display = 'none';
            }
          }

          var next_button = instance.popper.querySelector('.bultr-ih-next-tour');

          if (next_button) {
            next_button.addEventListener('click', function () {
              var tooltipid = this.getAttribute('data-tooltipid');
              var tippy_index = tooltipid - 1;
              tippy_instance[tippy_index].hide();
              tippy_instance[tippy_index + 1].show();
            });

            if (index == markers.length - 1) {
              next_button.style.display = 'none';
            }
          }

          var end_button = instance.popper.querySelector('.bultr-ih-end-tour');

          if (end_button) {
            end_button.addEventListener('click', function () {
              var tooltipid = this.getAttribute('data-tooltipid');
              var tippy_index = tooltipid - 1;
              tippy_instance[tippy_index].hide(); //preview tooltip

              if (preview.length > 0) {
                tippy_instance[0].show();
              }

              if (marker.classList.contains("bultr-ih-rep-tooltip-show")) {
                tippy_instance[index].show();
              }
            });
          } //check close button exist


          var close_button = instance.popper.querySelector('.bultr-ih-tooltip-close');

          if (close_button) {
            close_button.addEventListener('click', function () {
              var tooltipid = this.getAttribute('data-tooltipid');
              var tippy_index = tooltipid - 1;
              tippy_instance[tippy_index].hide(); //preview tooltip

              if (preview.length > 0) {
                tippy_instance[0].show();
              }

              if (marker.classList.contains("bultr-ih-rep-tooltip-show")) {
                tippy_instance[index].show();
              }
            });
          }
        }
      });
      marker.addEventListener('click', function () {
        var _this = this;

        tippy_instance.forEach(function (instance, i) {
          if (preview.length > 0) {
            tippy_instance[0].show();
          } //preview


          if (rep_preview.length > 0) {
            var tippy_index = _this.getAttribute('data-marker') - 1;

            if (marker.classList.contains('bultr-ih-rep-tooltip-show')) {
              if (tippy_instance[tippy_index]) {
                tippy_instance[tippy_index].show();
              }
            }
          } //bricks admin


          if (preview.length == 0 && rep_preview.length == 0) {
            if (i !== index) {
              instance.hide();
            }
          }

          if (bricksData.isAdmin != 1) {
            if (i !== index) {
              instance.hide();
            }
          }
        });
      }); //lottie animation

      var lottie_ele = marker.querySelector(".bultr-ih-lottie");

      if (lottie_ele !== null) {
        var lottie_data = JSON.parse(lottie_ele.getAttribute("data-lottie-settings"));
        var lottie_id = lottie_ele.getAttribute('data-lottie-id');
        lottie.destroy(lottie_id);
        var lottie_animt = lottie.loadAnimation({
          container: lottie_ele,
          path: lottie_data.url,
          renderer: "svg",
          loop: lottie_data.loop,
          autoplay: true,
          name: lottie_id
        });

        if (lottie_data.direction === true) {
          lottie_animt.setDirection(-1);
        }
      }
    }); //tooltip preview   

    if (preview.length > 0) {
      tippy_instance[0].show();
    } //tooltip repeat preview


    if (rep_preview.length > 0) {
      rep_preview.forEach(function (marker_id) {
        var tippy_index = marker_id.getAttribute('data-marker') - 1;

        if (tippy_instance[tippy_index]) {
          tippy_instance[tippy_index].show();
        }
      });
    }
  });
}
