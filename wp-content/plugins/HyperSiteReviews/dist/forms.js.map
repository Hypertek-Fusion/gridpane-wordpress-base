{"version":3,"file":"forms.js","sources":["../admin/js/forms.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const pages = document.querySelectorAll('.setup-page') || document.querySelectorAll('.reviews-page');\n    console.log(pages)\n    const prevButton = document.querySelector('.page-prev');\n    const nextButton = document.querySelector('.page-next');\n    let currentPage = 0;\n    let reviewsPerPage = 10; // Default reviews per page\n\n    // Initialize window.HSRevData if not already done\n    window.HSRevData = window.HSRevData || {};\n    window.HSRevData.functions = window.HSRevData.functions || {};\n    window.HSRevData.data = window.HSRevData.data || {};\n    window.HSRevData.data.selectedReviews = new Set();\n\n    // Prevent default form submission\n    const form = document.querySelector('form');\n    form.addEventListener('submit', (e) => {\n        e.preventDefault(); // Prevents the form from being submitted\n        submitForm(); // Handle form submission\n    });\n\n    const isAnyCheckboxCheckedOnCurrentPage = () => {\n        const currentCheckboxes = pages[currentPage].querySelectorAll('input:not([name=\"select-all-reviews\"])[type=\"checkbox\"]');\n        return Array.from(currentCheckboxes).some(cb => cb.checked);\n    };\n\n    const selectAllReviews = (element) => {\n        const reviewCheckboxes = pages[currentPage].querySelectorAll('input[name*=\"selected-review-\"][type=\"checkbox\"]');\n        const locationId = window.HSRevData.data.locationId;\n        const reviews = window.HSRevData.data.reviewsCache[locationId] || [];\n\n        Array.from(reviewCheckboxes).forEach(cb => {\n            const reviewId = cb.value;\n            cb.checked = element.checked;\n            if (element.checked) {\n                window.HSRevData.data.selectedReviews.add(reviewId);\n            } else {\n                window.HSRevData.data.selectedReviews.delete(reviewId);\n            }\n        });\n\n        updateHiddenInput();\n        updateButtonState();\n    };\n\n    const updateHiddenInput = () => {\n        const hiddenInput = document.getElementById('selected_reviews');\n        const filteredReviewIds = Array.from(window.HSRevData.data.selectedReviews).filter(id => id.startsWith('AbFvOq'));\n        hiddenInput.value = filteredReviewIds.join(',');\n    };\n\n    const getCheckedAccountId = () => {\n        const selectedCheckbox = pages[0].querySelector('input[type=\"checkbox\"]:checked');\n        if (selectedCheckbox) {\n            return selectedCheckbox.closest('.row-item').dataset.accountId;\n        }\n        return null;\n    };\n\n    const getCheckedLocationId = () => {\n        const selectedCheckbox = pages[1].querySelector('input[type=\"checkbox\"]:checked');\n        if (selectedCheckbox) {\n            return selectedCheckbox.closest('.row-item').dataset.locationId;\n        }\n        return null;\n    };\n\n    const updateButtonState = () => {\n        if (currentPage !== 2) {\n            nextButton.innerText = 'Next Page';\n        } else {\n            nextButton.innerText = 'Submit';\n        }\n        nextButton.disabled = !isAnyCheckboxCheckedOnCurrentPage();\n    };\n\n    const attachCheckboxListeners = (container) => {\n        const checkboxes = container.querySelectorAll('input[type=\"checkbox\"]');\n        checkboxes.forEach(c => {\n            c.addEventListener('change', e => {\n                const clickedCheckbox = e.target;\n                const reviewId = clickedCheckbox.value;\n                if (clickedCheckbox.checked) {\n                    window.HSRevData.data.selectedReviews.add(reviewId);\n                } else {\n                    window.HSRevData.data.selectedReviews.delete(reviewId);\n                }\n                updateHiddenInput();\n                updateButtonState();\n            });\n        });\n    };\n\n    const showPage = (index) => {\n        pages.forEach((page, i) => {\n            page.style.display = i === index ? 'block' : 'none';\n        });\n\n        prevButton.disabled = index === 0;\n        updateButtonState();\n    };\n\n    showPage(currentPage);\n\n    prevButton.addEventListener('click', () => {\n        if (currentPage > 0) {\n            currentPage--;\n            showPage(currentPage);\n        }\n    });\n\n    nextButton.addEventListener('click', () => {\n        if (currentPage < pages.length - 1 && isAnyCheckboxCheckedOnCurrentPage()) {\n            if (currentPage === 0) {\n                const accountId = getCheckedAccountId();\n                if (accountId && window.HSRevData.functions.getLocations) {\n                    if (window.HSRevData.data.accountId !== accountId) {\n                        console.log('Account changed, clearing location cache');\n                        window.HSRevData.data.locationsCache = {};\n                    }\n                    window.HSRevData.functions.getLocations(accountId);\n                    window.HSRevData.data.accountId = accountId;\n                    console.log(`Account ID set: ${accountId}`);\n                }\n            } else if (currentPage === 1) {\n                const locationId = getCheckedLocationId();\n                if (locationId && window.HSRevData.functions.prefetchReviews) {\n                    if (window.HSRevData.data.locationId !== locationId) {\n                        console.log('Location changed, clearing review cache');\n                        window.HSRevData.data.reviewsCache = {};\n                    }\n                    window.HSRevData.functions.prefetchReviews(locationId);\n                    window.HSRevData.data.locationId = locationId;\n                    console.log(`Location ID set: ${locationId}`);\n                }\n            }\n            currentPage++;\n            showPage(currentPage);\n        } else if (currentPage === 2 && isAnyCheckboxCheckedOnCurrentPage()) {\n            form.submit(); // Only submit the form when on the last page\n        }\n    });\n\n    if (window.HSRevData && window.HSRevData.functions) {\n        window.HSRevData.functions.attachCheckboxListeners = attachCheckboxListeners;\n        window.HSRevData.functions.selectAllReviews = selectAllReviews;\n    }\n\n    if (pages[currentPage]) {\n        attachCheckboxListeners(pages[currentPage]);\n    }\n\n    // Pagination Functions\n    const reviewsPerPageSelect = document.getElementById('reviews-per-page');\n\n\n    const changePage = (newPage) => {\n        const totalPages = Math.ceil(getTotalItems() / reviewsPerPage);\n        if (newPage > 0 && newPage <= totalPages) {\n            currentPage = newPage;\n            showPageReviews(currentPage);\n        }\n    };\n\n    const showPageReviews = (page) => {\n        const pages = document.querySelectorAll('.reviews-page');\n        pages.forEach((pageElement, index) => {\n            pageElement.style.display = (index + 1 === page) ? 'block' : 'none';\n        });\n\n        updatePaginationControls(getTotalItems(), currentPage, reviewsPerPage);\n    };\n\n    const getTotalItems = () => {\n        return document.querySelectorAll('.review-row').length;\n    };\n\n    document.getElementById('page-prev').addEventListener('click', () => changePage(currentPage - 1));\n    document.getElementById('page-next').addEventListener('click', () => changePage(currentPage + 1));\n    reviewsPerPageSelect.addEventListener('change', function () {\n        reviewsPerPage = parseInt(this.value, 10);\n        currentPage = 1; // Reset to first page on perPage change\n        showPageReviews(currentPage);\n    });\n\n    showPageReviews(currentPage);\n});\n\nconst updatePaginationControls = (totalItems, currentPage, itemsPerPage) => {\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\n    document.getElementById('page-prev').disabled = currentPage <= 1;\n    document.getElementById('page-next').disabled = currentPage >= totalPages;\n};\n\n\nexport { updatePaginationControls, changePage, showPageReviews, selectAllReviews };\n"],"names":["pages","prevButton","nextButton","currentPage","reviewsPerPage","form","isAnyCheckboxCheckedOnCurrentPage","currentCheckboxes","cb","selectAllReviews","element","reviewCheckboxes","locationId","reviewId","updateHiddenInput","updateButtonState","hiddenInput","filteredReviewIds","id","getCheckedAccountId","selectedCheckbox","getCheckedLocationId","attachCheckboxListeners","container","c","e","clickedCheckbox","showPage","index","page","i","accountId","reviewsPerPageSelect","changePage","newPage","totalPages","getTotalItems","showPageReviews","pageElement","updatePaginationControls","totalItems","itemsPerPage"],"mappings":"AAAA,SAAS,iBAAiB,mBAAoB,IAAM,CAChD,MAAMA,EAAQ,SAAS,iBAAiB,aAAa,GAAK,SAAS,iBAAiB,eAAe,EACnG,QAAQ,IAAIA,CAAK,EACjB,MAAMC,EAAa,SAAS,cAAc,YAAY,EAChDC,EAAa,SAAS,cAAc,YAAY,EACtD,IAAIC,EAAc,EACdC,EAAiB,GAGrB,OAAO,UAAY,OAAO,WAAa,CAAE,EACzC,OAAO,UAAU,UAAY,OAAO,UAAU,WAAa,CAAE,EAC7D,OAAO,UAAU,KAAO,OAAO,UAAU,MAAQ,CAAE,EACnD,OAAO,UAAU,KAAK,gBAAkB,IAAI,IAG5C,MAAMC,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,iBAAiB,SAAW,GAAM,CACnC,EAAE,eAAc,EAChB,YACR,CAAK,EAED,MAAMC,EAAoC,IAAM,CAC5C,MAAMC,EAAoBP,EAAMG,CAAW,EAAE,iBAAiB,yDAAyD,EACvH,OAAO,MAAM,KAAKI,CAAiB,EAAE,KAAKC,GAAMA,EAAG,OAAO,CAC7D,EAEKC,EAAoBC,GAAY,CAClC,MAAMC,EAAmBX,EAAMG,CAAW,EAAE,iBAAiB,kDAAkD,EACzGS,EAAa,OAAO,UAAU,KAAK,WACzB,OAAO,UAAU,KAAK,aAAaA,CAAU,EAE7D,MAAM,KAAKD,CAAgB,EAAE,QAAQH,GAAM,CACvC,MAAMK,EAAWL,EAAG,MACpBA,EAAG,QAAUE,EAAQ,QACjBA,EAAQ,QACR,OAAO,UAAU,KAAK,gBAAgB,IAAIG,CAAQ,EAElD,OAAO,UAAU,KAAK,gBAAgB,OAAOA,CAAQ,CAErE,CAAS,EAEDC,EAAmB,EACnBC,EAAmB,CACtB,EAEKD,EAAoB,IAAM,CAC5B,MAAME,EAAc,SAAS,eAAe,kBAAkB,EACxDC,EAAoB,MAAM,KAAK,OAAO,UAAU,KAAK,eAAe,EAAE,OAAOC,GAAMA,EAAG,WAAW,QAAQ,CAAC,EAChHF,EAAY,MAAQC,EAAkB,KAAK,GAAG,CACjD,EAEKE,EAAsB,IAAM,CAC9B,MAAMC,EAAmBpB,EAAM,CAAC,EAAE,cAAc,gCAAgC,EAChF,OAAIoB,EACOA,EAAiB,QAAQ,WAAW,EAAE,QAAQ,UAElD,IACV,EAEKC,EAAuB,IAAM,CAC/B,MAAMD,EAAmBpB,EAAM,CAAC,EAAE,cAAc,gCAAgC,EAChF,OAAIoB,EACOA,EAAiB,QAAQ,WAAW,EAAE,QAAQ,WAElD,IACV,EAEKL,EAAoB,IAAM,CACxBZ,IAAgB,EAChBD,EAAW,UAAY,YAEvBA,EAAW,UAAY,SAE3BA,EAAW,SAAW,CAACI,EAAmC,CAC7D,EAEKgB,EAA2BC,GAAc,CACxBA,EAAU,iBAAiB,wBAAwB,EAC3D,QAAQC,GAAK,CACpBA,EAAE,iBAAiB,SAAUC,GAAK,CAC9B,MAAMC,EAAkBD,EAAE,OACpBZ,EAAWa,EAAgB,MAC7BA,EAAgB,QAChB,OAAO,UAAU,KAAK,gBAAgB,IAAIb,CAAQ,EAElD,OAAO,UAAU,KAAK,gBAAgB,OAAOA,CAAQ,EAEzDC,EAAmB,EACnBC,EAAmB,CACnC,CAAa,CACb,CAAS,CACJ,EAEKY,EAAYC,GAAU,CACxB5B,EAAM,QAAQ,CAAC6B,EAAMC,IAAM,CACvBD,EAAK,MAAM,QAAUC,IAAMF,EAAQ,QAAU,MACzD,CAAS,EAED3B,EAAW,SAAW2B,IAAU,EAChCb,EAAmB,CACtB,EAEDY,EAASxB,CAAW,EAEpBF,EAAW,iBAAiB,QAAS,IAAM,CACnCE,EAAc,IACdA,IACAwB,EAASxB,CAAW,EAEhC,CAAK,EAEDD,EAAW,iBAAiB,QAAS,IAAM,CACvC,GAAIC,EAAcH,EAAM,OAAS,GAAKM,EAAiC,EAAI,CACvE,GAAIH,IAAgB,EAAG,CACnB,MAAM4B,EAAYZ,EAAqB,EACnCY,GAAa,OAAO,UAAU,UAAU,eACpC,OAAO,UAAU,KAAK,YAAcA,IACpC,QAAQ,IAAI,0CAA0C,EACtD,OAAO,UAAU,KAAK,eAAiB,CAAE,GAE7C,OAAO,UAAU,UAAU,aAAaA,CAAS,EACjD,OAAO,UAAU,KAAK,UAAYA,EAClC,QAAQ,IAAI,mBAAmBA,CAAS,EAAE,EAE9D,SAAuB5B,IAAgB,EAAG,CAC1B,MAAMS,EAAaS,EAAsB,EACrCT,GAAc,OAAO,UAAU,UAAU,kBACrC,OAAO,UAAU,KAAK,aAAeA,IACrC,QAAQ,IAAI,yCAAyC,EACrD,OAAO,UAAU,KAAK,aAAe,CAAE,GAE3C,OAAO,UAAU,UAAU,gBAAgBA,CAAU,EACrD,OAAO,UAAU,KAAK,WAAaA,EACnC,QAAQ,IAAI,oBAAoBA,CAAU,EAAE,EAEhE,CACYT,IACAwB,EAASxB,CAAW,CACvB,MAAUA,IAAgB,GAAKG,KAC5BD,EAAK,OAAM,CAEvB,CAAK,EAEG,OAAO,WAAa,OAAO,UAAU,YACrC,OAAO,UAAU,UAAU,wBAA0BiB,EACrD,OAAO,UAAU,UAAU,iBAAmBb,GAG9CT,EAAMG,CAAW,GACjBmB,EAAwBtB,EAAMG,CAAW,CAAC,EAI9C,MAAM6B,EAAuB,SAAS,eAAe,kBAAkB,EAGjEC,EAAcC,GAAY,CAC5B,MAAMC,EAAa,KAAK,KAAKC,EAAa,EAAKhC,CAAc,EACzD8B,EAAU,GAAKA,GAAWC,IAC1BhC,EAAc+B,EACdG,EAAgBlC,CAAW,EAElC,EAEKkC,EAAmBR,GAAS,CAChB,SAAS,iBAAiB,eAAe,EACjD,QAAQ,CAACS,EAAaV,IAAU,CAClCU,EAAY,MAAM,QAAWV,EAAQ,IAAMC,EAAQ,QAAU,MACzE,CAAS,EAEDU,EAAyBH,EAAa,EAAIjC,EAAaC,CAAc,CACxE,EAEKgC,EAAgB,IACX,SAAS,iBAAiB,aAAa,EAAE,OAGpD,SAAS,eAAe,WAAW,EAAE,iBAAiB,QAAS,IAAMH,EAAW9B,EAAc,CAAC,CAAC,EAChG,SAAS,eAAe,WAAW,EAAE,iBAAiB,QAAS,IAAM8B,EAAW9B,EAAc,CAAC,CAAC,EAChG6B,EAAqB,iBAAiB,SAAU,UAAY,CACxD5B,EAAiB,SAAS,KAAK,MAAO,EAAE,EACxCD,EAAc,EACdkC,EAAgBlC,CAAW,CACnC,CAAK,EAEDkC,EAAgBlC,CAAW,CAC/B,CAAC,EAEI,MAACoC,EAA2B,CAACC,EAAYrC,EAAasC,IAAiB,CACxE,MAAMN,EAAa,KAAK,KAAKK,EAAaC,CAAY,EACtD,SAAS,eAAe,WAAW,EAAE,SAAWtC,GAAe,EAC/D,SAAS,eAAe,WAAW,EAAE,SAAWA,GAAegC,CACnE"}